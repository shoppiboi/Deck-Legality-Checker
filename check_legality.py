from mtgsdk import Card
import re
import tkinter
import threading

#   due to the number of print editions these five cards have;
#   the performance of the program is significantly hindered,
#   where upto 8 seconds are spent retrieving the data for each
#   respective card.
# 
#   Hence, they've been given an exception where instead of reaching
#   into the library, they will instantly return Legal, as these cards are
#   ~traditionally~ always Legal. 
basic_mana_cards = [
    "Forest", 
    "Island",
    "Swamp",
    "Mountain",
    "Plains"
]

#   gets all card names from the .COD file.
#   this script has been made for files generated by Cockatrice specifically-
#   so format remains constant and follows the extraction rules set out below.
def extract_card_names(cockatrice_file, ignore_side=False):
    card_names = []

    for line in cockatrice_file:

        #   if the side zone has been ignored, iteration of the file ends here
        if 'zone name="side"' in line and ignore_side:
            return card_names
        
        if '" name=' in line:
            _split = line.split()[2:]
            _split = ' '.join(_split)
            result = re.search('name="(.*)"/>', _split)
            card_names.append(result.group(1))

    return card_names


def retrieve_legalities(card_names, format_name="Standard"):

    pairings = {}

    for name in card_names:

        #   if the card is one of the basic mana cards, return Legal
        #   explanation for this has been provided at Lines 5-12
        if name in basic_mana_cards:
            pairings[name] = "Legal"

        else:

            #   get the first instance of the card (this is due to 
            #   the library returning all the print editions of the card)
            #   as the legality remains constant regardless of print edition
            card = Card.where(name=name).all()[0]

            pairings[name] = 'Not Legal'    #   incase the game format is not in the card's legalities

            for legality in card.legalities:
                if legality["format"] == format_name:
                    pairings[name] = legality["legality"]

    card_legality_pairs.update(pairings)

card_legality_pairs = {}
threads = []

def main(file, format_choice, ignore_sideboard):
    f = open(file, 'r')

    card_names = extract_card_names(f, ignore_sideboard)

    #   create batches from the large card set to improve performance and place them in threads
    for x in range(int(len(card_names)/4)):
        start_index = x * 5
        end_index = start_index + 5

        arguments = []
        if (end_index > len(card_names)):
            arguments = card_names[start_index:]
        else:
            arguments = card_names[start_index:end_index]

        #   create a thread with the batches for optimization
        t = threading.Thread(target=retrieve_legalities, args=(arguments, format_choice))
        threads.append(t)   #   add the thread to the array of active threads
        t.start()

    #   wait for all threads to finish before moving on
    for t in threads:
        t.join()

    sorted_legality_pairs = {}
    for name in card_names:
        sorted_legality_pairs[name] = card_legality_pairs[name]

    return sorted_legality_pairs